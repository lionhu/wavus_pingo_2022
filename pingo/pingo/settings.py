"""
Django settings for pingo project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
# from celery.schedules import crontab
from datetime import timedelta
from django.utils.translation import ugettext_lazy as _
# from .logger_settings import LOGGING

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = os.environ.get("SECRET_KEY")
DEBUG = int(os.environ.get("DEBUG", default=0))
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Application definition
AUTH_USER_MODEL = "authentication.User"
SITE_NAME = "PinGo Mall"
DOMAIN = "www.pingo.jp"

# Application definition
INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_celery_results',
    'django_celery_beat',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'djoser',
    "elasticsearch",
    "django_elasticsearch_dsl",
    'django_seed',
    'debug_toolbar',
    'imagekit',
    'mptt',
    'mathfilters',
    # "django-elasticsearch-dsl-drf",
    'rolepermissions',
    "djcelery_email",
    'django_filters',
    "easy_pdf",
    "authentication",
    "store",
    "backend_admin",
    "chat",
    'notifications',
    "core",
    "celery_tasks",
    "books",
    "fx",
    "search_indexes"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'core.middlewares.SquareSizeImageMiddleware',
    'pingo.exceptions.ExceptionMiddleware',
    'ipinfo_django.middleware.IPinfo',
    'authentication.middlewares.LastUserActivityMiddleware',
]
SHELL_PLUS = "bpython"
# CORS HEADERS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
ROOT_URLCONF = 'pingo.urls'
ROLEPERMISSIONS_MODULE = 'pingo.roles'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
            ],
        },
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    'DEFAULT_PAGINATION_CLASS': 'pingo.pagination.CustomPagination',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        'authentication.middlewares.PingoJWTAuthentication',
        # "rest_framework_simplejwt.authentication.JWTAuthentication",

    ),
    # 'EXCEPTION_HANDLER': 'pingo.exceptions.handle_exception'
}

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),
    # "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=10),
    # "REFRESH_TOKEN_LIFETIME": timedelta(minutes=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

WSGI_APPLICATION = 'pingo.wsgi.application'
ASGI_APPLICATION = "hello_daphne.asgi.application"
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('redis', 6379)],
        },
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("DB_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("DB_USER", "user"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "password"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
        'ATOMIC_REQUESTS': True,  # 追加
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        "LOCATION": "redis://redis:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
        }
    }
}
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SELERLIZER = 'json'
CELERY_TIMEZONE = 'Asia/tokyo'

# CELERY_RESULT_BACKEND = 'django-cache'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'
USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGES = [
    ('en', _('English')),
    ('ja', _('Japanese')),
]
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
SITE_ID = 1

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': '123',
            'secret': '456',
            'key': ''
        }
    }
}

EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'wavus.sakura.ne.jp'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'pingo@wavus.sakura.ne.jp'
EMAIL_HOST_PASSWORD = 'Wavus2021'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'pingo@wavus.jp'

# DJOSER CONFIG
DJOSER = {
    # "LOGIN_FIELD": "email",
    "USER_CREATE_PASSWORD_RETYPE": False,
    "USERNAME_CHANGED_EMAIL_CONFIRMATION": True,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,
    "SEND_CONFIRMATION_EMAIL": True,
    "SET_USERNAME_RETYPE": True,
    "SET_PASSWORD_RETYPE": True,
    "USERNAME_RESET_CONFIRM_URL": "username_reset_confirm?uid={uid}&tokens={token}",
    "PASSWORD_RESET_CONFIRM_URL": "auth/users/password_reset_confirm?uid={uid}&tokens={token}",
    "ACTIVATION_URL": "auth/users/activation?uid={uid}&tokens={token}",
    "SEND_ACTIVATION_EMAIL": True,
    "ADMIN_EMAIL": ["huhaiguang@me.com"],
    "SOCIAL_AUTH_TOKEN_STRATEGY": "djoser.social.token.jwt.TokenStrategy",
    "SOCIAL_AUTH_ALLOWED_REDIRECT_URIS": [
        "your redirect url",
        "your redirect url",
    ],
    "SERIALIZERS": {
        # "user_create": "djoser.serializers.UserCreateSerializer",  # custom serializer
        "user_create": "authentication.serializers.PingoUserCreateSerializer",  # custom serializer
        # "user": "djoser.serializers.UserSerializer",
        "user": "authentication.serializers.PingoUserSerializer",
        # "current_user": "djoser.serializers.UserSerializer",
        "current_user": "authentication.serializers.PingoUserSerializer",
        "user_delete": "djoser.serializers.UserSerializer",
    },
}
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'elasticsearch:9200'
    },
}

# Name of the Elasticsearch index
ELASTICSEARCH_INDEX_NAMES = {
    'search_indexes.documents': 'book',
    'search_indexes.documents.publisher': 'publisher',
}

SETTINGS_EXPORT = [
    'SITE_NAME',
]

REDIS_KEYS = {
    "USER": {
        "LOGIN_STATUS": "logged_in_user_{}"
    }
}
PINGO = {
    "MODEL_CRUD_PERMISSION": {
        "CATEGORY_CREATE": ["pingo.roles.Superadmin"],
    },
}

if DEBUG:
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = ['127.0.0.1']
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,
    }

if int(os.environ.get("AUTH_AXES", default=0)):
    INSTALLED_APPS += ['axes']
    MIDDLEWARE += ['axes.middleware.AxesMiddleware']
    AUTHENTICATION_BACKENDS.insert(0, 'axes.backends.AxesBackend')
    # https://create-it-myself.com/know-how/how-to-use-django-axes/
    AXES_FAILURE_LIMIT = 5
    AXES_COOLOFF_TIME = 1
    AXES_ONLY_USER_FAILURES = True
    AXES_LOCKOUT_TEMPLATE = "system/password_lock.html"
    AXES_RESET_ON_SUCCESS = True

# IPINFO_TOKEN = '123456789abc'
# IPINFO_SETTINGS = {
#     'cache_options': {
#         'ttl':30,
#         'maxsize': 128
#     },
#     'countries_file': 'custom_countries.json'
# }
